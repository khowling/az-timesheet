[{"/home/kehowli/projects/az-timesheet-demo/src/index.js":"1","/home/kehowli/projects/az-timesheet-demo/src/App.js":"2","/home/kehowli/projects/az-timesheet-demo/src/reportWebVitals.js":"3"},{"size":927,"mtime":1608001331480,"results":"4","hashOfConfig":"5"},{"size":15374,"mtime":1608131571590,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1607100343070,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"pntzqo",{"filePath":"12","messages":"13","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/kehowli/projects/az-timesheet-demo/src/index.js",["17"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { Configuration, PublicClientApplication } from \"@azure/msal-browser\";\n\n\nconst msalConfig = {\n  auth: {\n    authority: process.env.REACT_APP_AUTHORITY,\n    clientId: process.env.REACT_APP_CLIENT_ID,\n    redirectUri: process.env.REACT_APP_REDIRECTURI,\n\n  }\n};\n\nconst pca = new PublicClientApplication(msalConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <MsalProvider instance={pca}>\n      <App />\n    </MsalProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["18","19"],"/home/kehowli/projects/az-timesheet-demo/src/App.js",["20","21","22","23","24","25","26"],"import React, { useState } from 'react'\nimport './App.css';\n\nimport { useMsal, useMsalAuthentication, AuthenticatedTemplate } from \"@azure/msal-react\";\nimport { TextField, Spinner, Label, ProgressIndicator, SelectionMode, GroupHeader, DetailsList, Fabric, MessageBar, MessageBarType, PrimaryButton, Stack, DefaultButton, Separator, Dropdown, Slider, Panel, PanelType, } from '@fluentui/react'\nimport { Icon } from '@fluentui/react/lib/Icon';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\n\nimport { TagPicker } from 'office-ui-fabric-react/lib/Pickers';\n\ninitializeIcons();\n\n\nfunction TimeItem({ dismissPanel, _update, projects, categories, item, idx }) {\n\n  const [error, setError] = useState(null)\n  console.log(item)\n  console.log(idx)\n\n  const [input, handleInputChange] = useState({\n    'hours': item ? item.hours : 1,\n    'association_type': item && item.categories && item.categories.length > 0 ? 1 : 0,\n    'day': item ? item.day : 0,\n    'project': item ? item.project : \"\",\n    'calId': item && item.calId\n  })\n\n  function _onChange(e, val) {\n    handleInputChange({\n      ...input,\n      [e.target.name]: val\n    })\n  }\n\n  const testTags = projects.map(item => ({ key: item, name: item }));\n  //console.log(testTags)\n\n  function onItemSelected(i) {\n    _onChange({ target: { name: \"project\" } }, i.name)\n    return i\n  }\n  return (\n    <Stack tokens={{ childrenGap: 15 }} >\n\n      <Dropdown label=\"Day\" defaultSelectedKey={input.day} onChange={(e, i) => _onChange({ target: { name: \"day\" } }, i.key)} options={[{ key: 0, text: \"Sunday\" }, { key: 1, text: \"Monday\" }, { key: 2, text: \"Tuesday\" }, { key: 3, text: \"Wednesday\" }, { key: 4, text: \"Thursday\" }, { key: 5, text: \"Friday\" }, { key: 6, text: \"Saturday\" }]} />\n\n      <Label >Project Search</Label>\n      <TagPicker\n        label=\"Project\"\n        inputProps={{ defaultVisibleValue: input.project }}\n        removeButtonAriaLabel=\"Remove\"\n        onResolveSuggestions={(filterText, tagList) => {\n          return filterText\n            ? testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) >= 0)\n            : []\n        }}\n        getTextFromItem={(item) => item.name}\n        pickerSuggestionsProps={{\n          suggestionsHeaderText: 'Suggested projects',\n          noResultsFoundText: 'No projects found',\n        }}\n        itemLimit={2}\n        onItemSelected={onItemSelected}\n      />\n\n      <Slider\n        label=\"Hours\"\n        min={1}\n        max={10}\n        step={1}\n        defaultValue={input.hours}\n        showValue={true}\n        onChange={(val) => _onChange({ target: { name: \"hours\" } }, val)}\n        snapToStep\n      />\n\n      <Label>Outlook Assosiation</Label>\n      <Stack tokens={{ childrenGap: 15, padding: 10 }} styles={{ root: { border: \"1px solid\" } }}>\n\n        <Dropdown label=\"Always assosiate project when\" defaultSelectedKey={input.association_type} onChange={(e, i) => _onChange({ target: { name: \"association_type\" } }, i.key)} options={[{ key: 0, text: \"Subject includes\" }, { key: 1, text: \"Catorgorised as\" }]} />\n        {input.association_type === 0 ?\n          <TextField label=\"Subject\" iconProps={{ iconName: 'Calendar' }} placeholder={input.subject} />\n          :\n          <Label >Categories</Label>,\n          <TagPicker\n            label=\"Cat\"\n            removeButtonAriaLabel=\"Remove\"\n            onResolveSuggestions={(filterText, tagList) => {\n              return filterText\n                ? categories.map(item => ({ key: item, name: item })).filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) >= 0)\n                : []\n            }}\n            getTextFromItem={(item) => item.name}\n            pickerSuggestionsProps={{\n              suggestionsHeaderText: 'Suggested categories',\n              noResultsFoundText: 'No projects found',\n            }}\n            itemLimit={2}\n          />\n        }\n      </Stack>\n      <Stack.Item>\n        <Label>Outlook Id</Label>\n        {input.calId}\n      </Stack.Item>\n\n\n      {error &&\n        <MessageBar messageBarType={MessageBarType.error} isMultiline={false} truncated={true}>\n          {error}\n        </MessageBar>\n      }\n      <Stack horizontal tokens={{ childrenGap: 5 }}>\n        <PrimaryButton text=\"Save\" onClick={() => _update(idx, input)} allowDisabledFocus disabled={false} />\n        <DefaultButton text=\"Cancel\" onClick={dismissPanel} allowDisabledFocus disabled={false} />\n        {idx >= 0 && <DefaultButton text=\"Delete\" onClick={() => _update(idx, null)} allowDisabledFocus disabled={false} />}\n      </Stack>\n\n    </Stack>\n  )\n}\n\nconst iconClass = mergeStyles({\n  fontSize: 20,\n  height: 20,\n  width: 20,\n  marginRight: '5px',\n});\n\nconst flexrow = mergeStyles({\n  width: \"100%\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  justifyContent: \"left\"\n})\n\nfunction App() {\n\n  const [panel, setPanel] = React.useState({ open: false })\n  const [importcal, setImportcal] = React.useState(0)\n  const [projects, setProjects] = React.useState([\n    'Alpha Project',\n    'Beta Project'])\n\n  const [categories, setCategories] = React.useState([])\n\n  const [entries, setEntries] = React.useState({\n    hours: 0,\n    groups: [\n      { key: 'sun', name: 'Sunday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'mon', name: 'Monday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'tue', name: 'Tuesday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'wed', name: 'Wednesday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'thu', name: 'Thursday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'fri', name: 'Friday', startIndex: 0, count: 0, level: 0, hours: 0 },\n      { key: 'sat', name: 'Saturday', startIndex: 0, count: 0, level: 0, hours: 0 }\n    ],\n    items: []\n  })\n\n  useMsalAuthentication(\"redirect\");\n  const { instance, accounts } = useMsal();\n\n\n  function openTimeItem(editid) {\n    setPanel({ open: true, editid })\n  }\n\n  function dismissPanel() {\n    setPanel({ open: false })\n  }\n\n  function _sumbit() {\n\n  }\n\n  function add_in_order(new_val, array) {\n\n    // remove existing item with same calId\n    const existing_idx = new_val.calId ? array.findIndex(i => new_val.calId === i.calId) : -1\n    const items = existing_idx >= 0 ? [...array.slice(0, existing_idx), ...array.slice(existing_idx + 1)] : [...array]\n\n    // add new in order\n    for (let i = 0; i < items.length; i++) {\n      if (new_val.day <= items[i].day) {\n        return [...items.slice(0, i), new_val, ...items.slice(i)]\n      }\n    }\n    return [...items, new_val]\n  }\n\n  function add(idx, item) {\n\n    setEntries((prevState) => {\n      if (idx >= 0) { // editing exiting item\n        if (item) { //changing\n          return recalcGroups([...prevState.items.slice(0, idx), item, ...prevState.items.slice(idx + 1)], prevState.groups)\n        } else { // deleting\n          return recalcGroups([...prevState.items.slice(0, idx), ...prevState.items.slice(idx + 1)], prevState.groups)\n        }\n      } else {\n        return recalcGroups(add_in_order(item, [...prevState.items]), prevState.groups)\n      }\n    })\n    dismissPanel()\n  }\n\n  function recalcGroups(items, currentGroups) {\n\n    const hours = items.reduce((a, i) => a + i.hours, 0)\n    const groups = items.reduce((g, i) => {\n      g[i.day].count++; g[i.day].hours += i.hours\n      for (let a = i.day + 1; a < g.length; a++) {\n        g[a].startIndex++\n      }\n      return g\n    }, currentGroups.map(g => { return { ...g, startIndex: 0, count: 0, hours: 0 } }))\n\n    //console.log('groups')\n    //console.log(groups)\n    return { items, groups, hours }\n  }\n\n  function additems(newitems) {\n\n    const ps = new Set(projects)\n    const cs = new Set(categories)\n\n    setEntries((prevState) => {\n\n      let items = [...prevState.items]\n\n      for (const n of newitems) {\n        if (n.project) {\n          ps.add(n.project)\n        }\n        if (n.categories) {\n          for (let cat of n.categories)\n            cs.add(cat)\n        }\n        items = add_in_order(n, items)\n      }\n      console.log('items')\n      console.log(items)\n\n      return recalcGroups(items, prevState.groups)\n    })\n    setProjects(Array.from(ps))\n    setCategories(Array.from(cs))\n  }\n\n  function _callAPI() {\n    setImportcal(1)\n    if (accounts && accounts.length > 0) {\n      instance.acquireTokenSilent({\n        scopes: [process.env.REACT_APP_SERVER_SCOPE],\n        account: accounts[0]\n      }).then((response) => {\n        if (response) {\n\n          fetch(process.env.REACT_APP_SERVER_CALURL, {\n            headers: {\n              'Authorization': `Bearer ${response.accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            mode: 'cors'\n          }).then(response => response.json())\n            .then(data => {\n\n              additems(data.events.map(i => {\n                const d = new Date(i.startTime) //new Date(i.startTime.substr(6, 4), i.startTime.substr(3, 2) - 1, i.startTime.substr(0, 2), 1)\n                console.log(`adding ${i.subject}  -- ${i.startTime} -- ${d.getDay()} -- ${i.durationInMinutes}`)\n                return {\n                  calId: i.iCalUId,\n                  project: i.project,\n                  hours: Number.parseFloat((i.durationInMinutes / 60).toFixed(1)),\n                  day: d.getDay(),\n                  subject: i.subject,\n                  categories: i.categories\n                }\n              })//.filter(f => f.day >= 0 && f.day <= 4)\n              )\n              setImportcal(0)\n            })\n        }\n      })\n    }\n  }\n\n  function submitts() {\n    //setError(null)\n    //_fetchit('/api/store/inventory', 'POST', {}, result._id ? { _id: result._id, ...input } : input).then(succ => {\n    //  console.log(`created success : ${JSON.stringify(succ)}`)\n    //navTo(\"/MyBusiness\")\n    //dismissPanel()\n    //}, err => {\n    //  console.error(`created failed : ${err}`)\n    //  setError(`created failed : ${err}`)\n    //})\n  }\n\n  return (\n    <Fabric>\n      <AuthenticatedTemplate>\n        <main id=\"mainContent\" data-grid=\"container\" >\n\n          <nav className=\"header\">\n\n            <div className=\"logo\" style={{ padding: \"6px 0\" }}>\n              <Icon iconName=\"TimeEntry\" style={{ fontSize: 23, margin: '0 15px', color: 'deepskyblue' }} />\n            </div>\n            <div className=\"logo\" style={{ padding: \"8px 0\" }}>\n              <div style={{ fontSize: 15 }}>Time Recording Assistant, <b>welcome {accounts && accounts.length > 0 ? accounts[0].name : \"unknown\"}</b></div>\n            </div>\n            <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\n            <label className=\"menu-icon\" htmlFor=\"menu-btn\"><span className=\"navicon\"></span></label>\n            <ul className=\"menu\">\n              <li style={{ cursor: \"pointer\" }}><a  >Time Entry</a></li>\n              <li style={{ cursor: \"pointer\" }}><a >My Projects</a></li>\n              <li style={{ cursor: \"pointer\" }}><a >My Analytics</a></li>\n              <li style={{ cursor: \"pointer\" }}><a onClick={() => instance.logout()}>Logout</a></li>\n            </ul>\n          </nav>\n\n          <div style={{ \"height\": \"43px\", \"width\": \"100%\" }} />\n\n\n          <Stack className=\"wrapper\" tokens={{ childrenGap: 10, padding: 10, maxWidth: \"900px\" }}>\n\n            <Panel\n              headerText=\"New Time entry\"\n              isOpen={panel.open}\n              onDismiss={dismissPanel}\n              type={PanelType.small}\n              // You MUST provide this prop! Otherwise screen readers will just say \"button\" with no label.\n              closeButtonAriaLabel=\"Close\"\n            >\n              {panel.open &&\n                <TimeItem dismissPanel={dismissPanel} _update={add} {...panel} projects={projects} categories={categories} />\n              }\n            </Panel>\n\n            <Stack horizontal tokens={{ childrenGap: 40, padding: 10 }}>\n              <div style={{ height: \"65px\", width: \"65px\" }} className=\"ms-BrandIcon--icon96 ms-BrandIcon--outlook\"></div>\n\n              <DefaultButton style={{ margin: '15px 15px' }} iconProps={{ iconName: 'CalendarWeek' }} text=\"Import from events\" onClick={_callAPI} disabled={(importcal !== 0)} />\n              {importcal === 1 &&\n                <Spinner style={{ marginLeft: \"0px\" }} label=\"loading...\" />\n              }\n            </Stack>\n\n            <Separator></Separator>\n            <DefaultButton iconProps={{ iconName: 'Add' }} text=\"Create Time Entry\" styles={{ root: { width: 180 } }} onClick={() => openTimeItem()} />\n\n            <DetailsList\n\n              items={entries.items}\n              groups={entries.groups}\n              columns={[\n                { key: 'day', name: `Week (${entries.hours} hrs)`, minWidth: 100, maxWidth: 200, isResizable: false },\n                {\n                  key: 'project', name: 'Project', fieldName: 'project', minWidth: 100, maxWidth: 200, onRender: (i) => {\n                    if (i.project) {\n                      return <Label>{i.project}</Label>\n                    } else {\n                      return <div key={i} className={flexrow}>\n                        <Icon iconName=\"Warning\" className={iconClass} style={{ color: \"red\" }} />\n                        <div>Add Project</div>\n                      </div>\n                    }\n                  }\n                },\n                { key: 'hours', name: 'Hours', fieldName: 'hours', minWidth: 100, maxWidth: 200, onRender: (i) => <Label>{i.hours} hrs</Label> },\n                {\n                  key: 'cat', name: 'Outlook entry', minWidth: 100, maxWidth: 200, onRender: (i) =>\n                    <div>\n                      {i.subject}\n                      {i.categories && i.categories.map((c, i) =>\n                        <div key={i} className={flexrow}>\n                          <Icon iconName=\"Tag\" className={iconClass} style={{ color: \"red\" }} />\n                          <div>{c}</div>\n                        </div>)\n                      }\n                    </div>\n                }\n              ]}\n              ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\n              ariaLabelForSelectionColumn=\"Toggle selection\"\n              checkButtonAriaLabel=\"Row checkbox\"\n              selectionMode={SelectionMode.none}\n              groupProps={{\n                showEmptyGroups: true,\n                onRenderHeader: (item) => <GroupHeader onRenderGroupHeaderCheckbox={false} {...item} onRenderTitle={(i) =>\n                  <div className='ms-GroupHeader-title' role=\"gridcell\">\n                    <span>{i.group.name}  ({i.group.hours} hrs\n                    {i.group.hasMoreData && '+'})\n                </span>\n                  </div>} />\n              }}\n              onActiveItemChanged={(item, idx) => setPanel({ open: true, item, idx })}\n              compact={false}\n            />\n\n            <ProgressIndicator label={`${Number.parseFloat((entries.hours / 40) * 100).toFixed(0)}% Complete (${entries.hours} hrs)`} percentComplete={entries.hours / 40} barHeight={entries.hours} />\n\n            <Stack.Item align=\"end\">\n              <DefaultButton text=\"Submit\" onClick={_sumbit} allowDisabledFocus disabled={entries.hours < 40} />\n            </Stack.Item>\n          </Stack>\n\n        </main>\n      </AuthenticatedTemplate>\n    </Fabric>\n  )\n}\n\nexport default App;\n","/home/kehowli/projects/az-timesheet-demo/src/reportWebVitals.js",[],{"ruleId":"27","severity":1,"message":"28","line":8,"column":10,"nodeType":"29","messageId":"30","endLine":8,"endColumn":23},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"27","severity":1,"message":"35","line":17,"column":17,"nodeType":"29","messageId":"30","endLine":17,"endColumn":25},{"ruleId":"36","severity":1,"message":"37","line":85,"column":37,"nodeType":"38","messageId":"39","endLine":85,"endColumn":38},{"ruleId":"27","severity":1,"message":"40","line":291,"column":12,"nodeType":"29","messageId":"30","endLine":291,"endColumn":20},{"ruleId":"41","severity":1,"message":"42","line":319,"column":49,"nodeType":"43","endLine":319,"endColumn":54},{"ruleId":"41","severity":1,"message":"42","line":320,"column":49,"nodeType":"43","endLine":320,"endColumn":53},{"ruleId":"41","severity":1,"message":"42","line":321,"column":49,"nodeType":"43","endLine":321,"endColumn":53},{"ruleId":"41","severity":1,"message":"42","line":322,"column":49,"nodeType":"43","endLine":322,"endColumn":86},"no-unused-vars","'Configuration' is defined but never used.","Identifier","unusedVar","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"'setError' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'submitts' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]